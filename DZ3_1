def LevenshteinDistance(s, t):
    n, m = len(t), len(s)

    v0 = [0] * (n + 1)
    v1 = [0] * (n + 1)

    for i in range(n):
        v0[i] = i

    for i in range(m):
        v1[0] = i + 1
        for j in range(n):
            deletionCost = v0[j + 1] + 1
            insertionCost = v1[j] + 1
            if s[i] == t[j]:
                substitutionCost = v0[j]
            else:
                substitutionCost = v0[j] + 1

            v1[j + 1] = min(deletionCost, insertionCost, substitutionCost)

        v0, v1 = v1, v0

    return v0[n]

L=[('kitten', 'sitting'),
    ('море', 'гора'),
    ('ybyf','ybyf')]
if __name__ == "__main__":
    for s, t in L:
        print(s, t, LevenshteinDistance(s, t))
def compare (s1,s2):
    ngrams = [s1[i:i+3] for i in range(len(s1))]
    count = 0
    for ngram in ngrams:
        count += s2.count(ngram)
    return count/max(len(s1), len(s2))

z = input('Введите слово №1:')
x = input('Введите слово №2:')
c = input('Введите слово №3:')
v = input('Введите слово №4:') 
    
pairs = [(z,x),(c,v)]
 
for s, t in pairs:
    print (s, t, compare (s,t))
